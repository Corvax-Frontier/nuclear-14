using Content.Client.Resources;
using Content.Client.Stylesheets;
using Content.Shared._NC.Trade;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._NC.Trade;

[GenerateTypedNameReferences]
public sealed partial class NcStoreItemControl : Control
{
    public event Action<string>? OnBuyPressed;

    [Dependency] private readonly IPrototypeManager _prototype = null!;
    [Dependency] private readonly IResourceCache _res = null!;

    private readonly ClientListingData _data;
    private readonly bool _hasBalance;
    private readonly string _price;
    private readonly string _discount;

    public NcStoreItemControl(
        ClientListingData data,
        string price,
        string discount,
        bool hasBalance,
        int balance,
        Texture? texture = null
    )
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _data = data;
        _hasBalance = hasBalance;
        _price = price;
        _discount = discount;

        StoreItemName.Text = data.Name;
        StoreItemDescription.SetMessage(data.Description);
        StoreItemTexture.Texture = texture;

        var isSell = data.CategoryMode == StoreMode.Sell;

        // Назначение цветов кнопки
        var defaultColor = isSell ? StyleNano.ButtonColorDangerDefault : StyleNano.ButtonColorGoodDefault;
        var hoverColor = isSell ? StyleNano.ButtonColorDangerHovered : StyleNano.ButtonColorGoodHovered;
        var pressedColor = isSell ? StyleNano.ButtonColorDangerPressed : StyleNano.ButtonColorPressed;
        var disabledColor = StyleNano.ButtonColorDisabled;

        StoreItemBuyButton.Text = isSell ? "Продать" : "Купить";
        StoreItemBuyButton.ToolTip = isSell ? "Продать предмет" : "Купить товар";

        StoreItemBuyButton.Disabled = !_hasBalance;
        StoreItemBuyButton.Modulate = _hasBalance ? defaultColor : disabledColor;

        // Эффекты при наведении и нажатии
        StoreItemBuyButton.OnMouseEntered += _ =>
        {
            if (!StoreItemBuyButton.Disabled)
                StoreItemBuyButton.Modulate = hoverColor;
        };

        StoreItemBuyButton.OnMouseExited += _ =>
        {
            if (!StoreItemBuyButton.Disabled)
                StoreItemBuyButton.Modulate = defaultColor;
        };

        StoreItemBuyButton.OnPressed += _ =>
        {
            if (!StoreItemBuyButton.Disabled)
                StoreItemBuyButton.Modulate = pressedColor;

            OnBuyPressed?.Invoke(_data.Id);
        };

        UpdateBuyButtonText();
    }

    private void UpdateBuyButtonText()
    {
        DiscountSubText.Text = _discount;
        StoreItemPrice.Text = _price;

        // Показываем иконку валюты, если задана
        if (_prototype.TryIndex<NcCurrencyPrototype>(_data.CurrencyId, out var currency))
        {
            if (currency.Icon is SpriteSpecifier.Texture tex)
                CurrencyIcon.Texture = _res.GetTexture(tex.TexturePath);
            else
                CurrencyIcon.Texture = null;
        }
        else
        {
            CurrencyIcon.Texture = null;
        }
    }
}

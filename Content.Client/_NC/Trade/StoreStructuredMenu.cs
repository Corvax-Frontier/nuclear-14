using System.Linq;
using Content.Client.Resources;
using Content.Shared._NC.Trade;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client._NC.Trade;

[GenerateTypedNameReferences]
public sealed partial class StoreStructuredMenu : DefaultWindow
{
    private StoreMode _currentMode = StoreMode.Buy;
    private string _selectedCategory = "–í—Å–µ";
    private string _searchText = string.Empty;
    private int _currentBalance;

    private readonly Dictionary<string, Button> _categoryButtons = new();
    private List<StoreListingData> _allListings = new();
    private Action<string>? _onBuy;

    public StoreStructuredMenu()
    {
        RobustXamlLoader.Load(this);

        BuyTab.OnPressed += _ => SwitchMode(StoreMode.Buy);
        SellTab.OnPressed += _ => SwitchMode(StoreMode.Sell);

        SearchBar.OnTextChanged += _ =>
        {
            _searchText = SearchBar.Text;
            RefreshItems();
        };
    }

    public void Setup(List<StoreListingData> listings, int balance, Action<string> onBuyCallback)
    {
        Logger.Debug($"[NcStoreUI] Setup: –ø–æ–ª—É—á–µ–Ω–æ {listings.Count} —Ç–æ–≤–∞—Ä–æ–≤");

        _allListings = listings;
        _onBuy = onBuyCallback;
        UpdateBalance(balance);
    }

    public void UpdateBalance(int newBalance)
    {
        _currentBalance = newBalance;
        BalanceLabel.Text = $"üí∞ {_currentBalance:N0} –ö–∞–ø–∫–æ–π–Ω"; // ‚Üê –∫—Ä–∞—Å–∏–≤–æ
        RefreshItems();
    }

    private void SwitchMode(StoreMode mode)
    {
        _currentMode = mode;
        _selectedCategory = "–í—Å–µ";
        GenerateCategories();
        RefreshItems();
    }

    private void GenerateCategories()
    {
        CategoryBar.Children.Clear();
        _categoryButtons.Clear();

        var categories = new HashSet<string> { "–í—Å–µ", };

        foreach (var listing in _allListings)
        {
            if (listing.CategoryMode != _currentMode)
                continue;

            categories.Add(listing.Category);
        }

        foreach (var category in categories.OrderBy(c => c))
        {
            var button = new Button
            {
                Text = category,
                ToggleMode = true,
                Pressed = category == _selectedCategory
            };

            button.OnPressed += _ =>
            {
                _selectedCategory = category;

                foreach (var (cat, btn) in _categoryButtons)
                    btn.Pressed = cat == category;

                RefreshItems();
            };

            CategoryBar.AddChild(button);
            _categoryButtons[category] = button;
        }
    }

    private void RefreshItems()
{
    ItemList.Children.Clear();
    Logger.Debug($"[NcStoreUI] RefreshItems: –≤—Å–µ–≥–æ {_allListings.Count} —Ç–æ–≤–∞—Ä–æ–≤");

    foreach (var listing in _allListings)
    {
        Logger.Debug($"[NcStoreUI] –û–±—Ä–∞–±–æ—Ç–∫–∞: {listing.Id}, –¶–µ–Ω–∞: {listing.Price}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {listing.Category}, Mode: {listing.CategoryMode}");

        if (listing.CategoryMode != _currentMode)
            continue;

        if (_selectedCategory != "–í—Å–µ" && listing.Category != _selectedCategory)
            continue;

        if (!string.IsNullOrEmpty(_searchText) &&
            !listing.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase) &&
            !listing.Description.Contains(_searchText, StringComparison.OrdinalIgnoreCase))
            continue;

        var data = new ClientListingData
        {
            Id = listing.Id,
            Name = listing.Name,
            Description = listing.Description,
            Icon = listing.Icon,
            Price = listing.Price,
            Category = listing.Category,
            CategoryMode = listing.CategoryMode,
            CurrencyId = listing.CurrencyId
        };

        Logger.Debug($"[NcStoreUI] –°–æ–∑–¥–∞—ë—Ç—Å—è UI –¥–ª—è: {data.Name}");

        Texture? texture = null;
        if (data.Icon is SpriteSpecifier.Texture tex)
            texture = IoCManager.Resolve<IResourceCache>().GetTexture(tex.TexturePath);

        var priceText = listing.Price >= 0
            ? $"-{listing.Price:N0} –ö–∞–ø–∫–æ–π–Ω"
            : $"+{-listing.Price:N0} –ö–∞–ø–∫–æ–π–Ω";

        var balanceSubText = listing.CategoryMode == StoreMode.Sell
            ? string.Empty
            : $"–í–∞—à –±–∞–ª–∞–Ω—Å: {_currentBalance:N0}";

        var control = new NcStoreItemControl(
            data,
            price: priceText,
            discount: balanceSubText,
            hasBalance: listing.CategoryMode == StoreMode.Sell || _currentBalance >= listing.Price,
            balance: _currentBalance,
            texture: texture
        );

        control.OnBuyPressed += id => _onBuy?.Invoke(id);
        ItemList.AddChild(control);

        Logger.Debug($"[NcStoreUI] UI –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫: {data.Name}");
    }
}

}
